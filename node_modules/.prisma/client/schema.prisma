generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(uuid())
  email        String    @unique
  passwordHash String
  role         Role
  isActive     Boolean   @default(true)
  isVerified   Boolean   @default(false) // <--- AGGIUNGI QUESTO
  otpCode      String? // <--- E QUESTO
  otpExpiresAt DateTime? // <--- E QUESTO
  otpAttempts  Int       @default(0) // <--- E QUESTO
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  Profile       Profile?
  referrals     Referral[]    @relation("CreatorReferrals")
  usedReferrals Referral[]    @relation("UsedReferrals")
  albumAccesses AlbumAccess[]
}

model Referral {
  id            String   @id @default(uuid())
  code          String   @unique
  creatorUserId String
  usedByUserId  String?
  isUsed        Boolean  @default(false)
  expiresAt     DateTime
  createdAt     DateTime @default(now())

  creator User  @relation("CreatorReferrals", fields: [creatorUserId], references: [id], onDelete: Cascade)
  usedBy  User? @relation("UsedReferrals", fields: [usedByUserId], references: [id], onDelete: Cascade)
}

model Profile {
  id        String   @id @default(uuid())
  userId    String   @unique
  name      String
  surname   String
  bio       String?
  sector    String?
  interests String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String?
  price       Float
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  albumId String?
  album   Album?  @relation(fields: [albumId], references: [id])
}

model Album {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  products      Product[]
  albumAccesses AlbumAccess[]
}

model AlbumAccess {
  id        String   @id @default(uuid())
  userId    String
  albumId   String
  grantedAt DateTime @default(now())
  // Relazioni opzionali
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  album     Album    @relation(fields: [albumId], references: [id], onDelete: Cascade)
}

enum Role {
  imprenditore
  investitore
  admin
}
